/* Generated by AN DISI Unibo */ 
package it.unibo.onestepahead

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Onestepahead ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
		var foundObstacle = false
		var StepTime = 0L
		var Duration = 0 
		var fail = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						foundObstacle = false 
					}
					 transition(edgeName="t09",targetState="doMoveForward",cond=whenDispatch("onestep"))
				}	 
				state("doMoveForward") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("onestep(DURATION)"), Term.createTerm("onestep(TIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								StepTime = payloadArg(0).toLong()
								forward("robotCmd", "robotCmd(w)" ,"robotactuator" ) 
								startTimer()
						}
						stateTimer = TimerActor("timer_doMoveForward", 
							scope, context!!, "local_tout_onestepahead_doMoveForward", StepTime )
					}
					 transition(edgeName="t110",targetState="endDoMoveForward",cond=whenTimeout("local_tout_onestepahead_doMoveForward"))   
					transition(edgeName="t111",targetState="checkStepFail",cond=whenEvent("sonarRobot"))
				}	 
				state("endDoMoveForward") { //this:State
					action { //it:State
						forward("robotCmd", "robotCmd(h)" ,"robotactuator" ) 
						forward("stepOk", "stepOk" ,"planexecutor" ) 
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("checkStepFail") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("sonarRobot(DISTANCE)"), Term.createTerm("sonarRobot(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								fail = payloadArg(0).toInt() < 10
						}
						fail = true
						println(fail)
					}
					 transition( edgeName="goto",targetState="stepFail", cond=doswitchGuarded({fail}) )
					transition( edgeName="goto",targetState="endDoMoveForward", cond=doswitchGuarded({! fail}) )
				}	 
				state("stepFail") { //this:State
					action { //it:State
						Duration=getDuration()
						println("onestepahead stepFail Duration=$Duration ")
						forward("stepFail", "stepFail(obstacle,$Duration)" ,"planexecutor" ) 
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
