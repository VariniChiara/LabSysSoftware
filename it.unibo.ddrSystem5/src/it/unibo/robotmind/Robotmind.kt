/* Generated by AN DISI Unibo */ 
package it.unibo.robotmind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotmind ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var Curmove     = ""  
		var IterCounter = 1 
		var backHome = true
		
		var finish = false
		var Map = ""
		
		//VIRTUAL ROBOT
		var StepTime   = 500	
		var StopTime = 100 
		 
		var Tback       = 0
		
		var X = 1
		var Y = 1
		
		var curX = 0
		var curY = 0
		
		var newX = 0 
		var newY = 0 
		
		var Dx = 0
		var Dy = 0
		
		var plan: List<aima.core.agent.Action>?    = null
		var dirtycell: Pair<Int,Int>? = null
		
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('resourceModel.pl')","") //set resVar	
						println("&&&  robotmind STARTED")
						itunibo.planner.plannerUtil.initAI(  )
						println("INITIAL MAP")
						itunibo.planner.plannerUtil.showMap(  )
					}
					 transition( edgeName="goto",targetState="waitForStart", cond=doswitch() )
				}	 
				state("waitForStart") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="startExploration",cond=whenDispatch("startCmd"))
				}	 
				state("startExploration") { //this:State
					action { //it:State
						println("&&&  exploration STARTED")
						itunibo.planner.plannerUtil.setGoal( X, Y  )
						forward("doPlan", "doPlan($X,$Y)" ,"planexecutor" ) 
					}
					 transition(edgeName="t11",targetState="nextGoal",cond=whenDispatch("planOk"))
					transition(edgeName="t12",targetState="checkIfObstacle",cond=whenDispatch("planFail"))
					transition(edgeName="t13",targetState="stopAppl",cond=whenDispatch("stopCmd"))
				}	 
				state("stopAppl") { //this:State
					action { //it:State
						println("%% robotmind stopped %%")
						forward("stopCmd", "stopCmd" ,"planexecutor" ) 
					}
					 transition( edgeName="goto",targetState="waitForStart", cond=doswitch() )
				}	 
				state("nextGoal") { //this:State
					action { //it:State
						if(backHome){ 
									backHome = false
									X = 0
									Y = 0
									IterCounter++
						 }
						else
						 { 
						 			backHome = true
						 			X = IterCounter
						 			Y = IterCounter
						  }
					}
					 transition( edgeName="goto",targetState="startExploration", cond=doswitch() )
				}	 
				state("checkIfObstacle") { //this:State
					action { //it:State
						println("========== checkIfObstacle ============")
						itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
						forward("modelUpdate", "modelUpdate(photo)" ,"resourcemodel" ) 
						itunibo.planner.plannerUtil.resetGoal( X, Y  )
						println("======= RESEAT GOAL ========")
						plan = itunibo.planner.plannerUtil.doPlan()
					}
					 transition( edgeName="goto",targetState="startExploration", cond=doswitchGuarded({(plan != null)}) )
					transition( edgeName="goto",targetState="checkNull", cond=doswitchGuarded({! (plan != null)}) )
				}	 
				state("checkNull") { //this:State
					action { //it:State
						println("========== checkNull ===========")
					}
					 transition( edgeName="goto",targetState="nextGoal", cond=doswitchGuarded({(!itunibo.planner.plannerUtil.currentGoalApplicable)}) )
					transition( edgeName="goto",targetState="finishChecking", cond=doswitchGuarded({! (!itunibo.planner.plannerUtil.currentGoalApplicable)}) )
				}	 
				state("finishChecking") { //this:State
					action { //it:State
						println("=========== finishChecking =============")
						dirtycell = itunibo.planner.moveUtils.getDirtyCell()
					}
					 transition( edgeName="goto",targetState="exloreDirtyCell", cond=doswitchGuarded({(dirtycell != null)}) )
					transition( edgeName="goto",targetState="endExploration", cond=doswitchGuarded({! (dirtycell != null)}) )
				}	 
				state("exloreDirtyCell") { //this:State
					action { //it:State
						println("=========== exloreDirtyCell =============")
						Dx = dirtycell!!.first
								Dy = dirtycell!!.second
						itunibo.planner.plannerUtil.setGoal( Dx, Dy  )
						plan = itunibo.planner.plannerUtil.doPlan()
					}
					 transition( edgeName="goto",targetState="doExploration", cond=doswitchGuarded({(plan!=null)}) )
					transition( edgeName="goto",targetState="endExploration", cond=doswitchGuarded({! (plan!=null)}) )
				}	 
				state("doExploration") { //this:State
					action { //it:State
						println("=========== doExploration =============")
						forward("doPlan", "doPlan($Dx,$Dy)" ,"planexecutor" ) 
					}
					 transition(edgeName="t24",targetState="finishChecking",cond=whenDispatch("planOk"))
					transition(edgeName="t25",targetState="setObstacle",cond=whenDispatch("planFail"))
				}	 
				state("setObstacle") { //this:State
					action { //it:State
						println("=========== setObstacle =============")
						itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
					}
					 transition( edgeName="goto",targetState="finishChecking", cond=doswitch() )
				}	 
				state("endExploration") { //this:State
					action { //it:State
						println("=========== endExploration =============")
						itunibo.planner.plannerUtil.setGoal( 0, 0  )
						forward("doPlan", "doPlan(0,0)" ,"planexecutor" ) 
					}
				}	 
			}
		}
}
