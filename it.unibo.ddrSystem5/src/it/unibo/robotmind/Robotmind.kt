/* Generated by AN DISI Unibo */ 
package it.unibo.robotmind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotmind ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			var iter = 1
			var X = iter
			var Y = iter
			var backHome = true
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('resourceModel.pl')","") //set resVar	
						println("&&&  robotmind STARTED")
						itunibo.planner.plannerUtil.initAI(  )
						println("INITIAL MAP")
						itunibo.planner.plannerUtil.showMap(  )
					}
					 transition( edgeName="goto",targetState="waitForStart", cond=doswitch() )
				}	 
				state("waitForStart") { //this:State
					action { //it:State
					}
					 transition(edgeName="t05",targetState="startExploration",cond=whenDispatch("startCmd"))
				}	 
				state("startExploration") { //this:State
					action { //it:State
						println("&&&  exploration STARTED")
						itunibo.planner.plannerUtil.setGoal( X, Y  )
						forward("doPlan", "doPlan($X,$Y)" ,"planexecutor" ) 
					}
					 transition(edgeName="t16",targetState="stopAppl",cond=whenEvent("stopCmd"))
					transition(edgeName="t17",targetState="nextGoal",cond=whenDispatch("planOk"))
					transition(edgeName="t18",targetState="stopAppl",cond=whenDispatch("planFail"))
				}	 
				state("stopAppl") { //this:State
					action { //it:State
						println("%% robotmind stopped %%")
						forward("robotCmd", "robotCmd(h)" ,"robotactuator" ) 
					}
					 transition( edgeName="goto",targetState="waitForStart", cond=doswitch() )
				}	 
				state("nextGoal") { //this:State
					action { //it:State
						if(backHome){ 
									backHome = false
									X = 0
									Y = 0
									iter++
						 }
						else
						 { 
						 			backHome = true
						 			X = iter
						 			Y = iter
						  }
					}
					 transition( edgeName="goto",targetState="startExploration", cond=doswitch() )
				}	 
			}
		}
}
