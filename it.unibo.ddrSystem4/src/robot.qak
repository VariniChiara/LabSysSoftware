//remeber to setp up the delegate into Applcode.js of frontend19
System robot

mqttBroker "localhost" : 1883

Dispatch robotCmd : robotCmd(X)


Dispatch modelChange  : modelChange( TARGET, VALUE )  //force a resource-model change
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )  //sent by the mind TARGET=robot|sonar|roomMap

Event modelChanged: modelChanged(TARGET, VALUE)

 


Context robotCtx ip [host="localhost" port=8090] -mqtt//-g cyan


QActor robotmind context robotCtx{
	State s0 initial {
		solve (consult ("resourceModel.pl"))
		println("ROBOT MIND STARTED")
	}
	Goto waitCmd

	State waitCmd {		}
	Transition t0 whenEvent modelChanged -> handleModelChanged


	State handleModelChanged{
		printCurrentMessage
 		onMsg( modelChanged : modelChanged(robot, VALUE) ) {
 			forward robotactuator -m robotCmd : robotCmd( $payloadArg(1) )

		}
	}
	Goto waitCmd
 }

QActor robotactuator context robotCtx {
	State s0 initial {
 	 	solve( consult("basicRobotConfig.pl") )
 		solve( robot(R, PORT) )  //R = virtual | realmbot | realnano
  		ifSolved {
     		println( "USING ROBOT : ${getCurSol(\"R\")},  port= ${getCurSol(\"PORT\")} " )
  			run itunibo.robot.robotSupport.create( myself, @R, @PORT, null )
  		}
  		else{ println("no robot") }

   		run itunibo.robot.robotSupport.move( "msg(a)" )
   		delay 700
   		run itunibo.robot.robotSupport.move( "msg(d)" )
   		delay 700
   		run itunibo.robot.robotSupport.move( "msg(h)" )
 	}
	Goto waitCmd

	State waitCmd{  } //robotCmd comes from a console OUTSIDE this (sub)system
	Transition t0  whenMsg   robotCmd  -> handleRobotCmd

	State handleRobotCmd{ //does not handle alarms
		printCurrentMessage
		onMsg( robotCmd : robotCmd( MOVE ) ) { //MOVE = w | a | s | d | h
			run itunibo.robot.robotSupport.move( "msg(${payloadArg(0)})" )
		}
 	}
	Goto waitCmd
}

QActor resourcemodel context robotCtx{

	State s0 initial {
		solve( consult("sysRules.pl")	 )
		solve( consult("resourceModel.pl")	 )
		solve( showResourceModel )
		run itunibo.coap.modelResourceCoap.create( myself, "resourcemodel" ) //CoAP access
	}
	Goto waitModelChange

	State waitModelChange{ }
	Transition t0 whenMsg modelChange -> changeModel //receive from sonar and frontend
	              whenMsg modelUpdate -> updateModel //forward from robotmind

	State updateModel{
		printCurrentMessage
		onMsg( modelUpdate : modelUpdate(robot,V ) ) {
			run itunibo.robot.resourceModelSupport.updateRobotModel( myself, payloadArg(1) )
			solve( showResourceModel )
		}
		onMsg( modelUpdate : modelUpdate(sonarRobot,V ) ) {
			run itunibo.robot.resourceModelSupport.updateSonarRobotModel( myself, payloadArg(1) )
		}
		onMsg( modelUpdate : modelUpdate(roomMap,V ) ) {  //JULY19
			//println("modelUpdate roomMap")
			run itunibo.robot.resourceModelSupport.updateRoomMapModel( myself, payloadArg(1) )
		}
	}
    Goto  waitModelChange

	State changeModel{
		printCurrentMessage
		//ROBOT MOVE
		onMsg(  modelChange  : modelChange(robot, V ) ) { // V= w | ...
			run itunibo.robot.resourceModelSupport.updateRobotModel( myself, payloadArg(1) )
			solve( showResourceModel )
			//emit local_modelChanged : modelChanged(  robot,  $payloadArg(1))  //for the robotmind
		}
		//SONAR DATA
//		onMsg( modelChange : modelChange( sonarRobot,V ) ) { // V= w | ...
//			run itunibo.robot.resourceModelSupport.updateSonarRobotModel( myself, payloadArg(1) )
//		}
	}
	Goto  waitModelChange
}
