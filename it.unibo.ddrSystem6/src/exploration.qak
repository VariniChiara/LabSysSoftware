System exploration

mqttBroker "localhost" : 1883

Event  sonarRobot : sonar( DISTANCE )	    //from  sonar on robot
Dispatch sonar : sonar

Dispatch userCmd  : userCmd( CMD ) //Message from console to robot
Dispatch robotCmd : robotCmd (CMD) //Selfsending robot message
Event startCmd :	startCmd
Event stopCmd  : stopCmd
Event backHomeCmd: backHomeCmd   
Dispatch stopPlan : stopPlan

//message try to do a step
Dispatch onestep       : onestep(DURATION)
Dispatch stepOk        : stepOk
Dispatch stepFail      : stepFail(R,T) //R=ok | obstacle, T = time

Dispatch modelChange  : modelChange( TARGET, VALUE )  //force a resource-model change
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )  //sent by the mind TARGET=robot|sonar|roomMap

Dispatch checkWall : checkWall //sent to start checking if an obstacle is a wall
Dispatch isWall : isWall
Dispatch isObstacle : isObstacle

Dispatch doPlan : doPlan(X,Y)
Dispatch planOk : planOk
Dispatch planFail : planFail

Dispatch luggageSafe: luggageSafe
Dispatch luggageDanger: luggageDanger

Dispatch temperatureTooHigh: temperatureTooHigh
Dispatch temperatureOk: temperatureOk

Dispatch stopBlinking:stopBlinking
Dispatch startBlinking:startBlinking

Context robotMindCtx        ip [host="localhost" port=8035]   -mqtt

Context robotResourceCtx        ip [host="192.168.1.164" port=8005]   -mqtt
//Context robotResourceCtx        ip [host="localhost" port=8005]   -mqtt


QActor planexecutor context robotMindCtx {
	["
		var Curmove     = \"\"
		var Map = \"\"
		var Tback = 0   
	    var StepTime   = 330
	    //var StepTime   = 900 //fisico

    "]
	State s0 initial {
		
		println("========== planexecutor: s0 ==========")
	}
	Goto waitForDoPlan
	
	State waitForDoPlan {
			println("========== planexecutor: waitForDoPlan ==========")
		
	}
	Transition t0  whenMsg doPlan  -> loadPlan
				   whenMsg stopPlan -> waitForDoPlan
 
	State loadPlan {
		println("========== planexecutor: loadPlan ==========")
		printCurrentMessage
 		run itunibo.planner.moveUtils.doPlan( myself ) //moves stored in actor kb
	}

	Goto doPlan
	
	State doPlan{
		println("========== planexecutor: doPlan ==========")
		["Map =  itunibo.planner.plannerUtil.getMapOneLine()"]
		forward resourcemodel -m modelUpdate  : modelUpdate( roomMap, $Map )
		run itunibo.planner.plannerUtil.showMap()

		solve( retract( move(M) ) ) 	//consume a move
		ifSolved {  ["Curmove = getCurSol(\"M\").toString()"]  }
		else { ["Curmove=\"nomove\" "]  }

	}

	Goto handlemove if "(Curmove != \"nomove\")" else planOk

 	State stopAppl {
 		println("========== planexecutor: stopAppl ==========")
 		forward robotactuator -m robotCmd : robotCmd(h)
 		forward resourcemodel -m modelUpdate  : modelUpdate( robot, h )
 		solve(retractall( move(_)))
 	}

 	Goto waitForDoPlan

	State planOk {
		println("========== planexecutor: planOk ==========")
		forward robotactuator -m robotCmd : robotCmd(h)
		forward resourcemodel -m modelUpdate  : modelUpdate( robot, h )
		forward robotmind -m planOk : planOk
	}

	Goto waitForDoPlan
 
	State handlemove {
			println("========== planexecutor: handlemove ==========")
	}

	Goto domove if "(Curmove != \"w\")" else attempttogoahead

	State domove {
		//println("========== planexecutor: domove ==========")

		run itunibo.planner.moveUtils.doPlannedMove(myself, Curmove)
		forward resourcemodel -m modelUpdate  : modelUpdate( robot, $Curmove )
		forward robotactuator -m robotCmd : robotCmd($Curmove)
		delay 500 //fisico
		forward robotactuator -m robotCmd : robotCmd(h)
		forward resourcemodel -m modelUpdate  : modelUpdate( robot, h )

		
	}

	//Transition t2 whenEvent startCmd -> doPlan    fisico
	Transition t2 whenTime 50 -> doPlan //in order to fix the position of physical robot
				whenEvent stopPlan -> stopAppl
 		         whenMsg doPlan -> doPlan


	
	//roomboundaryplanning.qak
	State attempttogoahead {
		println("========== planexecutor: attempttogoahead ==========")
		forward resourcemodel -m modelUpdate  : modelUpdate( robot, w )
		run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime)
	}

	Transition t3   whenMsg stepOk   -> stepDone
					whenMsg stepFail -> stepFailed

 	State stepDone{
 		println("========== planexecutor: stepDone ==========")
 		forward resourcemodel -m modelUpdate  : modelUpdate( robot, h )
 		run itunibo.planner.moveUtils.doPlannedMove(myself, "w")

 	}

 	Goto doPlan

 	State stepFailed{
 		println("========== planexecutor: stepFailed ==========")
 		println("&&&  OBSTACLE FOUND")
		["var TbackLong = 0L"]

		//printCurrentMessage
 		onMsg( stepFail : stepFail(Obs, Time) ) {
 			["Tback= (payloadArg(1).toLong().toString().toInt()*0.85 ).toInt()
			TbackLong = Tback.toLong()"]
 		}

 		println(" backToCompensate stepTime=$Tback")
 		forward resourcemodel -m modelUpdate  : modelUpdate( robot, s )
 		forward robotactuator -m robotCmd : robotCmd(s)

		delayVar TbackLong
  
		forward robotactuator -m robotCmd : robotCmd(h)
		forward resourcemodel -m modelUpdate  : modelUpdate( robot, h )

		forward robotmind -m planFail : planFail
		solve(retractall( move(_)))
	}
	Goto waitForDoPlan
}


QActor robotmind context robotMindCtx {
["
	var iterCounter = 1
	var X = iterCounter
	var Y = iterCounter
	var backHome = true

	var plan : List<aima.core.agent.Action>? = null
	var dirtyCell : Pair<Int,Int>? = null
	var Luggage_num = 0
	var Map = \"\"
"]

	State s0 initial {
		println("========== robotmind: s0 ==========")
		solve (consult ("resourceModel.pl"))
		println("&&&  robotmind STARTED")
		run itunibo.planner.plannerUtil.initAI()
		println("INITIAL MAP")
		run itunibo.planner.plannerUtil.showMap()
	}

	Goto waitForStart

	State waitForStart {
		println("========== robotmind: waitForStart ==========")
		forward planexecutor -m stopPlan: stopPlan
	}

	Transition t0  whenEvent startCmd  -> startExploration
				   whenEvent temperatureTooHigh  -> waitForTemperatureOk
   

	State waitForTemperatureOk {
		println("========== robotmind: waitForTemperatureOk ==========")
		forward planexecutor -m stopPlan: stopPlan
	}
	Transition t1 whenEvent temperatureOk -> waitForStart
	
	State startExploration {
		println("========== robotmind: startExploration ==========")
		//run itunibo.robotRaspOnly.nanoSupport.blinking()
		forward blinkinghandler -m startBlinking:startBlinking
		//run itunibo.planner.plannerUtil.setGoal(X,Y)
		//forward planexecutor -m doPlan : doPlan($X,$Y)
		
		
	} 

	Transition t1 whenEvent stopCmd -> waitForStart
				  whenMsg planOk -> nextGoal
				  whenMsg planFail -> newLuggageFound
				  whenEvent temperatureTooHigh -> waitForTemperatureOk
				  whenEvent backHomeCmd -> backHome

	State backHome {
		  println("========== robotmind: backHome ==========")	  
		  forward planexecutor -m stopPlan: stopPlan
		  run itunibo.planner.plannerUtil.setGoal(0,0)
		  forward planexecutor -m doPlan : doPlan(0,0)   
	}
	Transition t2 whenMsg planOk -> handleStartAfterBackHome 
			      whenMsg planFail -> backHome
			      whenEvent stopCmd -> waitForStart
			      whenEvent temperatureTooHigh  -> waitForTemperatureOk
	
	State handleStartAfterBackHome {
		 println("========== robotmind: handleStartAfterBackHome ==========")	  
	}
	Transition t0  whenEvent startCmd  -> startExploration
				   whenEvent temperatureTooHigh  -> waitForTemperatureOk
	

	State nextGoal {
		println("========== robotmind: nextGoal ==========")
		["dirtyCell = itunibo.planner.moveUtils.getDirtyCell()
		plan= null

		if(dirtyCell != null){
			itunibo.planner.plannerUtil.setGoal(dirtyCell!!.first, dirtyCell!!.second)
			plan = itunibo.planner.plannerUtil.doPlan()}

		"]
			
		if "(plan != null)" {    	
			["X = dirtyCell!!.first
			Y = dirtyCell!!.second"]
			run itunibo.planner.plannerUtil.setGoal(X, Y)
			
		} else {
			if "backHome" {
				["
				backHome = false
				X = 0
				Y = 0
				iterCounter++"]
			}
			else {
			["
				backHome = true
				X = iterCounter
				Y = iterCounter
			"]
			}
		}
		
	}
	Goto startExploration

	State newLuggageFound {
		println("========== robotmind: newLuggageFound ==========")
		["Luggage_num++"]
		forward resourcemodel -m modelUpdate: modelUpdate(luggage, $Luggage_num)
	
		run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
		["Map =  itunibo.planner.plannerUtil.getMapOneLine()"]
		forward resourcemodel -m modelUpdate:modelUpdate(roomMap, $Map)
	
		
		
	}
	Transition t2 whenMsg luggageSafe -> handleObstacle
				  whenMsg luggageDanger -> endExploration

	State handleObstacle {
		println("========== robotmind: handleObstacle ==========")
		run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
		run itunibo.planner.plannerUtil.resetGoal(X,Y)
		run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
		["plan = itunibo.planner.plannerUtil.doPlan()"]

		//per attivasre disattivare bottone danger sulla WP, false non lo uso ATTUALMENTE
 
	}
	Goto startExploration if "(plan != null)" else checkNull

	State checkNull {
		println("========== robotmind: checkNull ==========")
	}

	Goto nextGoal if "(!itunibo.planner.plannerUtil.currentGoalApplicable)" else endExploration

	State endExploration {
		
		println("========== robotmind: endExploration ==========")
		//forward resourcemodel -m modelUpdate  : modelUpdate(luggage, )
		run itunibo.planner.plannerUtil.setBomb()
		run itunibo.planner.plannerUtil.setGoal(0,0)
		forward planexecutor -m doPlan : doPlan(0,0)  
	    forward blinkinghandler -m stopBlinking:stopBlinking 
	}
	
	Transition  t5 whenMsg planOk -> pickBomb
				   whenMsg planFail -> endExploration
	
	State pickBomb{
		println("========== robotmind: pickBomb ==========")
		["X =  itunibo.planner.plannerUtil.getBomb().first
		Y =  itunibo.planner.plannerUtil.getBomb().second
		
		"] 
		println(X)
		println(Y)      
		run itunibo.planner.plannerUtil.setGoal(X,Y)		
		forward planexecutor -m doPlan : doPlan($X,$Y)     
	}       
	Transition  t5 whenMsg planOk -> takeBagAtHome 
					 whenMsg planFail -> pickBomb
	
	State takeBagAtHome{
		println("========== robotmind: takeBagAtHome ==========")
		forward robotactuator -m robotCmd:robotCmd(a)
		delay 500
		forward robotactuator -m robotCmd:robotCmd(a)
		delay 500
		forward robotactuator -m robotCmd:robotCmd(a)
		delay 500
		forward robotactuator -m robotCmd:robotCmd(a)
		delay 500
		run itunibo.planner.plannerUtil.setGoal(0,0)		
		forward planexecutor -m doPlan : doPlan(0,0)   
	}
	Transition t1 whenMsg planFail -> takeBagAtHome
}

 /*
 * ====================================================================
 * onestepahead robotmind.qak: actor that manages the forward step
 * ====================================================================
 */
QActor onestepahead context  robotMindCtx {
["
var foundObstacle = false
var StepTime = 0L
var Duration = 0
var fail = false
"]
	State s0 initial {
		//println("========== onestepahead: s0 ==========")
		["foundObstacle = false "]
	}
	Transition t0 whenMsg onestep -> doMoveForward

	State doMoveForward{
	 	//println("========== onestepahead: doMoveForward ==========")
		onMsg( onestep : onestep( TIME ) ) {
			["StepTime = payloadArg(0).toLong()"]
			forward robotactuator -m robotCmd : robotCmd(w)
	 		["startTimer()"] //startTimer is built-in in the actor

		}
	}
	Transition t1 whenTimeVar StepTime  -> endDoMoveForward
 		           whenMsg sonar -> stepFail

	State endDoMoveForward{
		//println("========== onestepahead: endDoMoveForward ==========")
		forward robotactuator -m robotCmd : robotCmd(h)
		//forward robotactuator -m robotCmd : robotCmd(h)
		forward resourcemodel -m modelUpdate : modelUpdate(robot, h)
		forward planexecutor -m stepOk : stepOk
	}

	Goto s0

	State stepFail{
		//println("========== onestepahead: stepFail ==========")
		
		["Duration=getDuration()"]  //getDuration is built-in in the actor
		printCurrentMessage
		println("onestepahead stepFail Duration=$Duration ")
		forward robotactuator -m robotCmd : robotCmd(h)
		forward planexecutor -m stepFail : stepFail(obstacle, $Duration)
	}
	Goto s0
}


/*
  * --------------------------------------------------------
  * robotactuator: just an actuator of move commands
  * --------------------------------------------------------
  */
QActor robotactuator context robotResourceCtx {
	State s0 initial {
		//println("========== robotactuator: s0 ==========")
 	 	solve( consult("basicRobotConfig.pl") )
 		solve( robot(R, PORT) )  //R = virtual | realmbot | realnano
  		ifSolved {
     		println( "USING ROBOT : ${getCurSol(\"R\")},  port= ${getCurSol(\"PORT\")} " )
  			run itunibo.robot.robotSupport.create( myself, @R, @PORT, null )
  		}
  		else{ println("no robot") }

   		run itunibo.robot.robotSupport.move( "msg(a)" )

   		delay 500
   		run itunibo.robot.robotSupport.move( "msg(d)" )

   		delay 500
   		run itunibo.robot.robotSupport.move( "msg(h)" )

 	}
	Goto waitCmd    
       
	State waitCmd{ 
			//println("========== robotactuator: waitCmd ==========")
	} //robotCmd comes from a console OUTSIDE this (sub)system
	Transition t0  whenMsg   robotCmd  -> handleRobotCmd

	State handleRobotCmd{ //does not handle alarms
		//println("========== robotactuator: handleRobotCmd ==========")
		printCurrentMessage
		onMsg( robotCmd : robotCmd( MOVE ) ) { //MOVE = w | a | s | d | h

			if "(payloadArg(0) == \"z\")" {
				run itunibo.robot.robotSupport.move("msg(a)")
				delay 100
				run itunibo.robot.robotSupport.move("msg(h)")

			} 	else { if "(payloadArg(0) == \"x\")" {
				run itunibo.robot.robotSupport.move("msg(d)")
				delay 100
				run itunibo.robot.robotSupport.move("msg(h)")

			} else {
				run itunibo.robot.robotSupport.move( "msg(${payloadArg(0)})" )
			}
			}
		}
 	}
	Goto waitCmd
}


QActor blinkinghandler context robotResourceCtx{
	
		State s0 initial {}
		Transition t0 whenMsg startBlinking -> sendBlinkingMsg
		
		State sendBlinkingMsg{
			println("blinking")
			run itunibo.robot.robotSupport.move("msg(b)")
		  
		}
		Transition t1 //whenTime 100 -> sendBlinkingMsg
					  whenMsg stopBlinking -> stopBlinking
		
		State stopBlinking{
			println("stop blinking")
		}		
		Goto s0
}

/*
  * --------------------------------------------------------
  * sonahandler: actor that manages the sonarRobot events
  * --------------------------------------------------------
  */
QActor sonarhandler context robotMindCtx{
	
	["var foundObstacle = false"]
  	State s0 initial{
  		println("========== sonarhandler: s0 ==========")
	}
	Goto waitForEvents

 	State waitForEvents{ 
 		println("========== sonarhandler: waitForEvents ==========")
 	}
   	Transition t0 whenEvent sonarRobot -> handleSonar //to test modeReact(model). See mbotSupport

 	State handleSonar{
 	    println("========== sonarhandler: handleSonar ==========")
 	   
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){
 			 
 			if "(payloadArg(0).toInt() <= 10)" { //10 fisico
 				["foundObstacle = true"]
 				forward onestepahead -m sonar : sonar
 				//forward robotactuator -m robotCmd : robotCmd(h)
 			}
 		}
 	}     
  
 	Goto waitForEvents
 	/*Goto waitToDiscard if "(foundObstacle)" else waitForEvents 	
 	

	State waitToDiscard {}
	
	Transition t0 whenEvent sonarRobot -> discardSonar 
 	
 	State discardSonar {
 		printCurrentMessage
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){
 			
 			if "(payloadArg(0).toInt() > 10)" { //10 fisico
 				["foundObstacle = false"]
 			}  
 		} 
 	}
 	
 	Goto waitToDiscard if "(foundObstacle)" else waitForEvents */	
 }


 /*
  * --------------------------------------------------------
  * Resource model: robot state as a coap resource accessile by Restful protocol
  * --------------------------------------------------------
  */
QActor resourcemodel context robotMindCtx{

	["var isLuggageDanger = false
	var isTemperatureTooHigh = false"]

	State s0 initial {
		//println("========== resourcemodel: s0 ==========")
		solve( consult("sysRules.pl")	 )
		solve( consult("resourceModel.pl")	 )
		solve( showResourceModel )
		run itunibo.coap.modelResourceCoap.create( myself, "resourcemodel" ) //CoAP access
		//run itunibo.coap.observer.resourceObserverCoapClient.create("coap://localhost/resourcemodel")	 //insert rigth ip
	}
	Goto waitModelChange

	State waitModelChange{
			//println("========== resourcemodel: waitModelChange ==========")
	}
	Transition t0 whenMsg modelChange -> changeModel //receive from sonar and frontend
	              whenMsg modelUpdate -> updateModel //forward from robotmind

	State updateModel{
		//println("========== resourcemodel: updateModel ==========")
		printCurrentMessage
		onMsg( modelUpdate : modelUpdate(robot,V ) ) {
			run itunibo.robot.resourceModelSupport.updateRobotModel( myself, payloadArg(1) )
			solve( showResourceModel )
		}
		onMsg( modelUpdate : modelUpdate(roomMap,V ) ) {
			run itunibo.robot.resourceModelSupport.updateRoomMapModel( myself, payloadArg(1) )
		}
		onMsg( modelUpdate : modelUpdate(luggage, V) ) {
			run itunibo.robot.resourceModelSupport.updateLuggageModel( myself, payloadArg(1)  )
		}
	}
    Goto  waitModelChange

	State changeModel{
		//println("========== resourcemodel: changeModel ==========")
		printCurrentMessage
		//ROBOT MOVE
		onMsg(  modelChange  : modelChange(robot, V ) ) { // V= w | ...
			forward robotactuator -m robotCmd : robotCmd($payloadArg(1))

		}
		onMsg(  modelChange  : modelChange(luggage, V ) ) { // V= safe | danger

			if"(payloadArg(1) == \"danger\")"{
				forward robotmind -m luggageDanger:luggageDanger
			}else{
				forward robotmind -m luggageSafe:luggageSafe			
			}
		}
		onMsg(  modelChange  : modelChange(temperature, V ) ) { // V= temperatureOk | temperatureTooHigh

			if"(payloadArg(1) == \"temperatureTooHigh\")"{
				forward robotmind -m temperatureTooHigh:temperatureTooHigh
			}else{
				forward robotmind -m temperatureOk:temperatureOk
			}
		}

	}
	Goto  waitModelChange	
	

}


