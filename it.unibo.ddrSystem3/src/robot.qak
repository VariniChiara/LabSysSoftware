System robot 

mqttBroker "localhost" : 1883

Dispatch robotCmd : robotCmd(X)

Event  userCmd    : userCmd(X)	//from GUI X = w | a | s | d | h       

Context robotCtx ip [host="localhost" port=8090] -mqtt//-g cyan


QActor robotmind context robotCtx{   
	State s0 initial {	
		solve (consult ("resourceModel.pl"))   
		println("ROBOT MIND STARTED")	
	}
	Goto waitCmd
	 
	State waitCmd {		} 
	Transition t0 whenEvent userCmd -> handleUserCmd
				 
	State handleUserCmd{   
		printCurrentMessage
 		onMsg( userCmd : userCmd(X) ) {
 			forward robotactuator -m robotCmd : robotCmd($payloadArg(0)) //do action
 			solve( action( robot, move($payloadArg(0)) ) )	  //update the model
 			solve (showResourceModel)
		}
	} 
	Goto waitCmd  
 }

QActor robotactuator context robotCtx {	 
	State s0 initial {  
 	 	solve( consult("basicRobotConfig.pl") )   
 		solve( robot(R, PORT) )  //R = virtual | realmbot | realnano
  		ifSolved { 
     		println( "USING ROBOT : ${getCurSol(\"R\")},  port= ${getCurSol(\"PORT\")} " )
  			run itunibo.robot.robotSupport.create( myself, @R, @PORT, null )
  		} 
  		else{ println("no robot") }
    		
   		run itunibo.robot.robotSupport.move( "msg(a)" )
   		delay 700
   		run itunibo.robot.robotSupport.move( "msg(d)" )
   		delay 700
   		run itunibo.robot.robotSupport.move( "msg(h)" )
 	}  
	Goto waitCmd   
 	 
	State waitCmd{  } //robotCmd comes from a console OUTSIDE this (sub)system
	Transition t0  whenMsg   robotCmd  -> handleRobotCmd
	
	State handleRobotCmd{ //does not handle alarms 
		printCurrentMessage 
		onMsg( robotCmd : robotCmd( MOVE ) ) { //MOVE = w | a | s | d | h
			run itunibo.robot.robotSupport.move( "msg(${payloadArg(0)})" ) 
		}	
 	}   
	Goto waitCmd 
}  