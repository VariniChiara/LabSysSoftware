
System ddrsys

mqttBroker "localhost" : 1883

//robot state update event
Event consoleUpdate: consoleUpdate(X) 

//temperature change event
Event tempOk: tempOk(X)

Event  sonarRobot : sonarRobot( DISTANCE )	    //from  sonar on robot      

//Message from console to robot
Dispatch explore: explore(X)  
Dispatch stopExplore: stopExplore(X)
Dispatch backHome: backHome(X)
Dispatch continueExplore: continueExplore(X)
Dispatch backHomeSinceBomb: backHomeSinceBomb(X)
Dispatch continueExploreAfterPhoto: continueExploreAfterPhoto(X)
 
//Message from robot to console
Dispatch sendPhoto: sendPhoto(X) 
   
//Message from robot to robot
Dispatch reachBag: reachBag(X)

Dispatch userCmd  : userCmd( CMD ) //Message from console to robot
Dispatch robotCmd : robotCmd (CMD) //Selfsending robot message
Dispatch startCmd :	startCmd 
Dispatch startTest : startTest (X,Y) //Test

//message try to do a step
Dispatch onestep       : onestep(DURATION)
Dispatch stepOk        : stepOk
Dispatch stepFail      : stepFail(R,T) //R=ok | obstacle, T = time

Dispatch modelChange  : modelChange( TARGET, VALUE )  //force a resource-model change
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )  //sent by the mind TARGET=robot|sonar|roomMap

Event  local_modelChanged   : modelChanged( TARGET, VALUE ) 


Context ctx ip [host="localhost" port=8090] -mqtt//-g cyan

ExternalQActor robotDataSource context ctx

QActor console context ctx {  
	
	State s0 initial {
		println("%%%% Console intialized %%%%")
	} 
	
	Goto waitForStart
	 
	State waitForStart {}
	
	Transition s0 whenMsg userCmd -> sendStart
	
	State sendStart{
		//delay 3000
		//forward robotmind -m startCmd : startCmd
		//forward robotmind -m startTest : startTest(0,8)
		
		onMsg (userCmd : userCmd(start)){
			forward robotmind -m startCmd : startCmd
		}
		println("Sent start  message")
	}
	
	Goto waitForStop 
	
	State waitForStop{}
	
	Transition s0 whenMsg userCmd -> sendStop
	
	State sendStop{		
		onMsg (userCmd : userCmd(stop)){
			forward robotmind -m userCmd : userCmd(stop)
		}
		println("Sent stop  message")
	}
	
}

QActor resourcemodel context ctx{
["var dobackstep = false"]
	State s0 initial {		
		solve( consult("sysRules.pl")	 )       
		solve( consult("resourceModel.pl")	 )
		solve( showResourceModel ) 		
		run itunibo.coap.modelResourceCoap.create( myself, "resourcemodel" ) //CoAP access
	} 
	Goto waitModelChange
	 
	State waitModelChange{ }
	Transition t0 whenMsg modelChange -> changeModel //forward from sonaHendler (*** pipe)
	              whenMsg modelUpdate -> updateModel //forward from robotmind

	State updateModel{  
		printCurrentMessage
		onMsg( modelUpdate : modelUpdate(robot,V ) ) {
			run itunibo.robot.resourceModelSupport.updateRobotModel( myself, payloadArg(1) )
		}
		onMsg( modelUpdate : modelUpdate(sonarRobot,V ) ) {
			run itunibo.robot.resourceModelSupport.updateSonarRobotModel( myself, payloadArg(1) )
		}
		onMsg( modelUpdate : modelUpdate(roomMap,V ) ) {  //JULY19
			//println("modelUpdate roomMap")
			run itunibo.robot.resourceModelSupport.updateRoomMapModel( myself, payloadArg(1) )
		}
	} 
    Goto  waitModelChange
    
	State changeModel{  
		//printCurrentMessage 
		//ROBOT MOVE
		onMsg( modelChange : modelChange( robot,V ) ) { // V= w | ...
			run itunibo.robot.resourceModelSupport.updateRobotModel( myself, payloadArg(1) )
			emit local_modelChanged : modelChanged(  robot,  $payloadArg(1))  //for the robotmind
		} 
		//SONAR DATA  
//		onMsg( modelChange : modelChange( sonarRobot,V ) ) { // V= w | ...
//			run itunibo.robot.resourceModelSupport.updateSonarRobotModel( myself, payloadArg(1) )
//		}
	}  
	Goto  waitModelChange
}


QActor robotmind context ctx { 
["var Curmove     = \"\"  
var IterCounter = 0 
var backHome = false
var maxX = 0
var maxY = 0
var finish = false

//VIRTUAL ROBOT
var StepTime   = 330	 
 
var Tback       = 0
"]
	State s0 initial {
		println("&&&  robotmind STARTED")
		solve (consult ("ddrsys.pl")) 
		solve (consult ("resourceModel.pl")) 
		println("Robot intialized")
		run itunibo.planner.plannerUtil.initAI()
		println("INITIAL MAP") 
		run itunibo.planner.plannerUtil.showMap() 
		
	} 

	Goto waitForStart
	
	State waitForStart {	printCurrentMessage }
	
	Transition t0  whenMsg startCmd  -> startExploration
				   whenMsg startTest -> startExplorationTest
	
	State startExplorationTest {
		["finish = true
		  backHome = false

		  var x = \"\"
		  var y = \"\"	"]
		println("&&&  exploration TEST")
		
		printCurrentMessage		        
 		onMsg( startTest : startTest(X, Y) ) { 
 			[" x =payloadArg(0) 
			   y =payloadArg(1) "]
		run itunibo.planner.plannerUtil.setGoal(x,y)
		run itunibo.planner.moveUtils.doPlan( myself ) //moves stored in actor kb	
 		}
	}
	Goto doPlan
	
	
	State startExploration {
		println("&&&  exploration STARTED")
		run itunibo.planner.plannerUtil.setGoal("1","1")
		run itunibo.planner.moveUtils.doPlan( myself ) //moves stored in actor kb
	}
	
	Goto doPlan
	
	//raggiungo la cella
	State doPlan {	
		run itunibo.planner.plannerUtil.showMap() 
		solve( retract( move(M) ) ) 	//consume a move
		ifSolved {  ["Curmove = getCurSol(\"M\").toString()"]  }
		 else { ["Curmove=\"nomove\" "]  }
	}  
	
	Goto handlemove if "(Curmove != \"nomove\")" else choose
	
	State handlemove {}
	
	Goto domove if "(Curmove != \"w\")" else attempttogoahead
	
	State domove {
		run itunibo.planner.moveUtils.doPlannedMove(myself, Curmove)
		forward robotactuator -m robotCmd : robotCmd($Curmove)
		delay 700
		forward robotactuator -m robotCmd : robotCmd(h)
	}
	
	Goto doPlan
	
	//roomboundaryplanning.qak
	State attempttogoahead {	
		run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime)
	}
	Transition t0   whenMsg stepOk   -> stepDone   
					whenMsg stepFail -> stepFailed 
	 
 	State stepDone{  
 		run itunibo.planner.moveUtils.doPlannedMove(myself, "w")	
 	}
 	
 	Goto doPlan
 	
 	State stepFailed{
 		println("&&&  FOUND WALL")
["var TbackLong = 0L"]		 
 	  	
		//printCurrentMessage		        
 		onMsg( stepFail : stepFail(Obs, Time) ) { 
 			["Tback=payloadArg(1).toLong().toString().toInt() / 2
			TbackLong = Tback.toLong()"]
 			println("stepFailed ${payloadArg(1).toString()}")
 		}
  		
 		println(" backToCompensate stepTime=$Tback")
 		forward robotactuator -m robotCmd : robotCmd(s)
		delayVar TbackLong
		forward robotactuator -m robotCmd : robotCmd(h)
		delay 700
 //--------------------------------------------------
 		run itunibo.planner.plannerUtil.wallFound()
 	
	}   
	
	//Goto endOfJob //**checkWallTest
	Goto setGoalAfterWall
	
	State setGoalAfterWall{
		solve( retractall( move(_) ))
	["
	if( itunibo.planner.plannerUtil.getDirection() == \"downDir\" ){ 
		maxY = itunibo.planner.plannerUtil.getPosY()
		if(maxX == 0 ){
			itunibo.planner.plannerUtil.setGoal(IterCounter, maxY)
		} else {itunibo.planner.plannerUtil.setGoal(maxX, maxY)}
	} 
	else if( itunibo.planner.plannerUtil.getDirection() == \"rightDir\" ){ 
		maxX = itunibo.planner.plannerUtil.getPosX()
		if (maxY == 0 ){
			itunibo.planner.plannerUtil.setGoal(maxX, IterCounter)
		} else { itunibo.planner.plannerUtil.setGoal(maxX, maxY) }
	} else {
		itunibo.planner.plannerUtil.setGoal(0, 0)
	}
	"]
		run itunibo.planner.moveUtils.doPlan( myself )
	}
	
	Goto doPlan

	
	State choose {}
	Goto goBackHome if "backHome" else nextStep
	
 	//torno a casa
	State goBackHome{
	["backHome = false"]
		println("&&&  returnToHome")
 		//solve( retractall( move(_) ))		//clean the actor kb
 		run itunibo.planner.plannerUtil.setGoal(0,0)
  		run itunibo.planner.moveUtils.doPlan( myself )
	
  		delay 700
    }  
	
	Goto doPlan
	 
	State nextStep {}

	Goto endOfJob if "finish" else calculatenextstep
	
	State calculatenextstep{
["IterCounter++
	backHome = true
	if (maxX == 0 && maxY == 0){ itunibo.planner.plannerUtil.setGoal(IterCounter,IterCounter) }
	else if( maxX != 0 && maxY == 0 ){ itunibo.planner.plannerUtil.setGoal(maxX,IterCounter) } 
	else if( maxX == 0 && maxY != 0 ){ itunibo.planner.plannerUtil.setGoal(IterCounter, maxY) } 
	else {
 		itunibo.planner.plannerUtil.setGoal(maxX, maxY)
		finish = true 
}
"]
		println("&&&  nextStep")
 		run itunibo.planner.moveUtils.doPlan( myself )
	}
	Goto doPlan
	
	State endOfJob{
		["if (maxX != 0 && maxY != 0) {itunibo.planner.plannerUtil.fixwalls(maxX, maxY)}"]
		
		println("FINAL MAP")   
 		run itunibo.planner.plannerUtil.showMap() 
		println("&&&  planex0 ENDS")
 	}

}


 /*
 * ====================================================================
 * onestepahead robotmind.qak
 * ====================================================================
 */
QActor onestepahead context  ctx {
[" 
var foundObstacle = false; 
var StepTime = 0L; 
var Duration=0 
"]  
	State s0 initial {	   
		["foundObstacle = false "]
	} 
	Transition t0 whenMsg onestep -> doMoveForward
 
	State doMoveForward{		 
		onMsg( onestep : onestep( TIME ) ) {
			["StepTime = payloadArg(0).toLong()"]    		
			forward robotactuator -m robotCmd : robotCmd(w)
	 		["startTimer()"] //startTimer is built-in in the actor
	 		
		}      
	}          
	Transition t0 whenTimeVar StepTime  -> endDoMoveForward		
 		           whenEvent sonarRobot -> stepFail  
 		    
	State endDoMoveForward{
		forward robotactuator -m robotCmd : robotCmd(h)
		forward robotmind -m stepOk : stepOk
	}
	Goto s0
	  

	
	State stepFail{ 
		["Duration=getDuration()"]  //getDuration is built-in in the actor
		printCurrentMessage
		println("onestepahead stepFail Duration=$Duration ")
		
		forward robotmind -m stepFail : stepFail(obstacle, $Duration)
	}
	Goto s0  
}    


 /*
  * --------------------------------------------------------
  * Basic robot: just an actuator of move commands
  * --------------------------------------------------------
  */ 
QActor robotactuator context ctx {	 
	State s0 initial {  
		["  
//CREATE A PIPE for the sonar-data stream
val filter = itunibo.robot.sonaractorfilter( \"sonaractorfilter\" , myself  ) 
val logger = itunibo.robot.Logger(\"logFiltered\")
filter.subscribe(logger)  

"] 	 	
 			  
   		solve( consult("basicRobotConfig.pl") )   
 		solve( robot(R, PORT) )  //R = virtual | realmbot | realnano
  		ifSolved { 
     		println( "USING ROBOT : ${getCurSol(\"R\")},  port= ${getCurSol(\"PORT\")} " )
  			run itunibo.robot.robotSupport.create( myself, @R, @PORT, filter )
  		} 
  		else{ println("no robot") }
    		
   		run itunibo.robot.robotSupport.move( "msg(a)" )
   		delay 700
   		run itunibo.robot.robotSupport.move( "msg(d)" )
   		delay 700
   		run itunibo.robot.robotSupport.move( "msg(h)" )
 	}  
	Goto waitCmd   
 	 
	State waitCmd{  } //robotCmd comes from a console OUTSIDE this (sub)system
	Transition t0  whenMsg   robotCmd  -> handleRobotCmd
	
	State handleRobotCmd{ //does not handle alarms 
		printCurrentMessage 
		onMsg( robotCmd : robotCmd( MOVE ) ) { //MOVE = w | a | s | d | h
			run itunibo.robot.robotSupport.move( "msg(${payloadArg(0)})" ) 
		}	
 	}   
	Goto waitCmd 
}  

