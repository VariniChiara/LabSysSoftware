/* Generated by AN DISI Unibo */ 
package it.unibo.robotmind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotmind ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var obstacle = false 
		var Curmove     = ""  
		var IterCounter = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('ddrsys.pl')","") //set resVar	
						solve("consult('resourceModel.pl')","") //set resVar	
						println("Robot mind intialized")
					}
					 transition( edgeName="goto",targetState="waitForStart", cond=doswitch() )
				}	 
				state("waitForStart") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="initMap",cond=whenDispatch("startCmd"))
				}	 
				state("initMap") { //this:State
					action { //it:State
						println("&&&  robotmind STARTED")
						itunibo.planner.plannerUtil.initAI(  )
						println("INITIAL MAP")
						itunibo.planner.plannerUtil.showMap(  )
						itunibo.planner.plannerUtil.setGoal( "1", "1"  )
						itunibo.planner.moveUtils.doPlan(myself)
					}
					 transition( edgeName="goto",targetState="doPlan", cond=doswitch() )
				}	 
				state("doPlan") { //this:State
					action { //it:State
						solve("retract(move(M))","") //set resVar	
						if(currentSolution.isSuccess()) { Curmove = getCurSol("M").toString()
						itunibo.planner.moveUtils.doPlannedMove(myself ,Curmove )
						forward("robotCmd", "robotCmd($Curmove)" ,"robotactuator" ) 
						delay(1000) 
						 }
						else
						{ Curmove="nomove" 
						forward("robotCmd", "robotCmd(h)" ,"robotactuator" ) 
						 }
					}
					 transition( edgeName="goto",targetState="doPlan", cond=doswitchGuarded({(Curmove != "nomove")}) )
					transition( edgeName="goto",targetState="endOfJob", cond=doswitchGuarded({! (Curmove != "nomove")}) )
				}	 
				state("endOfJob") { //this:State
					action { //it:State
						println("FINAL MAP")
						itunibo.planner.plannerUtil.showMap(  )
						println("&&&  planex0 ENDS")
					}
					 transition( edgeName="goto",targetState="goBackHome", cond=doswitch() )
				}	 
				state("goBackHome") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.setGoal( "0", "0"  )
						itunibo.planner.moveUtils.doPlan(myself)
					}
					 transition( edgeName="goto",targetState="doPlan", cond=doswitch() )
				}	 
			}
		}
}
