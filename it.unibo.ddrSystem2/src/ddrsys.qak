
System ddrsys

//robot state update event
Event consoleUpdate: consoleUpdate(X) 

//temperature change event
Event tempOk: tempOk(X)
 
Event  sonarRobot   : sonarRobot( DISTANCE )	    //from  sonar on robot      

//Message from console to robot
Dispatch explore: explore(X)  
Dispatch stopExplore: stopExplore(X)
Dispatch backHome: backHome(X)
Dispatch continueExplore: continueExplore(X)
Dispatch backHomeSinceBomb: backHomeSinceBomb(X)
Dispatch continueExploreAfterPhoto: continueExploreAfterPhoto(X)
 
//Message from robot to console
Dispatch sendPhoto: sendPhoto(X) 
 
//Message from robot to robot
Dispatch reachBag: reachBag(X)


Dispatch userCmd  : userCmd( CMD ) //Message from console to robot
Dispatch robotCmd : robotCmd (CMD) //Selfsending robot message
Dispatch startCmd :	startCmd 

Dispatch onestep       : onestep(DURATION)
Dispatch stepOk        : stepOk()		
Dispatch stepFail      : stepFail(R,T) //R=obstacole | obstacle, T = time


Context ctx ip [host="localhost" port=8090] //-g cyan

QActor console context ctx {  
	
	State s0 initial {
		println("Console intialized")
	} 
	
	Goto sendMsg
	
	State sendMsg {
		forward robotmind -m startCmd : startCmd
		println("Sent start  message")
	}
 
}
 

QActor robotmind context ctx { 
["var Curmove     = \"\"  
var IterCounter = 1 
var backHome = true
var maxX = 0
var maxY = 0
var finish = false

//VIRTUAL ROBOT 
var StepTime   = 330	 

var Tback = 0
"]
	State s0 initial {
		solve (consult ("ddrsys.pl")) 
		solve (consult ("resourceModel.pl")) 
		println("Robot intialized")
		
	} 
	
	Goto waitForStart
	
	State waitForStart {	printCurrentMessage }
	
	Transition t0  whenMsg startCmd  -> initMap
	
	State initMap {
		println("&&&  robotmind STARTED")
		run itunibo.planner.plannerUtil.initAI()
		println("INITIAL MAP") 
		run itunibo.planner.plannerUtil.showMap() 
		run itunibo.planner.plannerUtil.setGoal("1","1")
		run itunibo.planner.moveUtils.doPlan( myself ) //moves stored in actor kb
		
	}
	
	Goto doPlan
	
	//raggiungo la cella
	State doPlan {	
		run itunibo.planner.plannerUtil.showMap() 
		solve( retract( move(M) ) ) 	//consume a move
		ifSolved {   
			["Curmove = getCurSol(\"M\").toString()"]  
			
		} else { ["Curmove=\"nomove\" "]  
			
		}

	}  
	
	Goto handleMove if "(Curmove != \"nomove\")" else choose
	
	State handleMove{		}
	
	Goto doMove if "(Curmove !=\"w\")" else attemptToGoAhead
	
	State doMove {
		run itunibo.planner.moveUtils.doPlannedMove(myself, Curmove)
		forward robotactuator -m robotCmd : robotCmd($Curmove)
		delay 700
		forward robotactuator -m robotCmd : robotCmd(h)
	}
	
	Goto doPlan
	
	State attemptToGoAhead {
		run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime) 
	}
	Transition t0   whenMsg stepOk   -> stepDone   
				    whenMsg stepFail -> stepFailed 


	State stepDone {
		run itunibo.planner.moveUtils.doPlannedMove(myself, "w")
		//run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
	
	}
	 
	Goto doPlan
	
	State stepFailed {
		println("&&&  FOUND WALL")
["
var TbackLong   = 0L
"]		
		//forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)   
		
		//printCurrentMessage		        
 		onMsg( stepFail : stepFail(Obs,Time) ) { 
 			["Tback=payloadArg(1).toString().toInt()
			TbackLong=Tback.toLong()"]
 			println("stepFailed ${payloadArg(1).toString()}")
 		}
  		//Return in cell
  	 	//IMPORTANT: the virtual robot could not work without a back step 		  
 		
 //------------------------------------------------
 //backToCompensate function
 		println("moveUtils backToCompensate stepTime=$Tback")
		//actor.forward("modelChange", "modelChange(robot,s)", "resourcemodel")
		forward robotactuator -m robotCmd : robotCmd(s)
		delayVar TbackLong
		//actor.forward("modelChange", "modelChange(robot,h)", "resourcemodel")
		forward robotactuator -m robotCmd : robotCmd(h)
		delay 700 
 		run itunibo.planner.plannerUtil.wallFound()

	}
	
	Goto setGoalAfterWall
	
	//risetto il goal dopo che ho trovato un muro
	State setGoalAfterWall{
		
		["var dir = itunibo.planner.plannerUtil.getDirection()
							
		if(dir == \"downDir\" ){
			maxY = IterCounter-1
			if(maxX == 0){
				itunibo.planner.plannerUtil.setGoal(IterCounter,maxY)
			}else {
				itunibo.planner.plannerUtil.setGoal(maxX,maxY)
			}

		}else if(dir == \"rightDir\"){
			maxX = IterCounter-1
			itunibo.planner.plannerUtil.setGoal(maxX,IterCounter)
			if(maxY == 0){
				itunibo.planner.plannerUtil.setGoal(maxX, IterCounter)
			}else {
				itunibo.planner.plannerUtil.setGoal(maxX,maxY)
			}

		}else{
			itunibo.planner.plannerUtil.setGoal(0,0)
		}"]
		
		run itunibo.planner.moveUtils.doPlan( myself )
	}
	
	Goto doPlan

	State choose {}
	
	 
	Goto goBackHome if "backHome" else nextStep
	
 	//torno a casa
	State goBackHome{
	["backHome = false"]
		println("&&&  returnToHome")
 		//solve( retractall( move(_) ))		//clean the actor kb
 		run itunibo.planner.plannerUtil.setGoal(0,0)
  		run itunibo.planner.moveUtils.doPlan( myself )
  
  		delay 700
    } 
	
	Goto doPlan
	
	State nextStep {	}

	Goto endOfJob if "finish" else calculateNextStep
	
	State calculateNextStep {
	["IterCounter++
	backHome = true
		
	if(maxX==0 && maxY==0){
		itunibo.planner.plannerUtil.setGoal(IterCounter, IterCounter)
	}else if(maxX!=0 && maxY == 0){
		itunibo.planner.plannerUtil.setGoal(maxX, IterCounter)			
	}else if(maxX==0 && maxY != 0){
		itunibo.planner.plannerUtil.setGoal(IterCounter, maxY)		
	}else{
		itunibo.planner.plannerUtil.setGoal(maxX, maxY)	
		finish = true	
	}"]
	
		
		println("&&& nextstep")
		run itunibo.planner.moveUtils.doPlan( myself ) //moves stored in actor kb
	}
	
	Goto doPlan
		
	State endOfJob{
		
		println("FINAL MAP")   
 		run itunibo.planner.plannerUtil.showMap() 
		println("&&&  planex0 ENDS")
 	}

	/* 
	Transition t0  whenMsg startCmd  -> waitForEvents 
	  
	//starting proactive behaviour
	
	State waitForEvents {		} 
	
	Transition t1   whenMsg userCmd  -> handleCmd
					whenMsg robotCmd -> handleCmd
					whenEvent sonarRobot -> handleSonarRobot
 	 
	State handleCmd{  
		printCurrentMessage
		onMsg (userCmd   : userCmd( CMD )){
			solve( action( robot, move($payloadArg(0)) ) ) //change the robot state model
			//forward basicrobot -m  robotCmd  : robotCmd( CMD ) 
			
		}
		onMsg (robotCmd   : robotCmd( CMD )){
			solve( action( robot, move($payloadArg(0)) ) ) //change the robot state model
			//forward basicrobot -m  robotCmd  : robotCmd( CMD )
		}
	}
	
	Goto waitForEvents
	
	State handleSonarRobot{
 		printCurrentMessage
 		onMsg ( sonarRobot : sonarRobot(DISTANCE) ){
			["obstacle = Integer.parseInt( payloadArg(0) ) < 10 "]
 		} 	 
 	}
 	
	Goto handeObstacle  if "obstacle" else waitForEvents 
	
	State handeObstacle{		
		println("handleObstacle: going backward")  
 		forward robotmind -m robotCmd : robotCmd( s ) 		
 			//UPDATE the model : supported action
 			//run itunibo.robot.resourceModelSupport.updateModel( myself, "s" )
 		delay 300
 		println("handeObstacle: stopping")  
	    forward robotmind -m robotCmd : robotCmd( h )
 			//UPDATE the model : supported action
 			//run itunibo.robot.resourceModelSupport.updateModel( myself, "h" )
  	}
  	
	Goto waitForEvents
	
	*/
}


 /*
  * --------------------------------------------------------
  * Basic robot: just an actuator of move commands
  * --------------------------------------------------------
  */ 
QActor robotactuator context ctx {	 
	State s0 initial {  
		/*["  
//CREATE A PIPE for the sonar-data stream
val filter = itunibo.robot.sonaractorfilter( \"sonaractorfilter\" , myself  ) 
val logger = itunibo.robot.Logger(\"logFiltered\")
filter.subscribe(logger)  
"] 	*/	 
 			  
   		solve( consult("basicRobotConfig.pl") )   
 		solve( robot(R, PORT) )  //R = virtual | realmbot | realnano
  		ifSolved { 
     		println( "USING ROBOT : ${getCurSol(\"R\")},  port= ${getCurSol(\"PORT\")} " )
  			run itunibo.robot.robotSupport.create( myself, @R, @PORT, null )
  		} 
  		else{ println("no robot") }
    		
   		run itunibo.robot.robotSupport.move( "msg(a)" )
   		delay 700
   		run itunibo.robot.robotSupport.move( "msg(d)" )
   		delay 700
   		run itunibo.robot.robotSupport.move( "msg(h)" )
 	}  
	Goto waitCmd   
 	 
	State waitCmd{  } //robotCmd comes from a console OUTSIDE this (sub)system
	Transition t0  whenMsg   robotCmd  -> handleRobotCmd
	
	State handleRobotCmd{ //does not handle alarms 
		printCurrentMessage 
		onMsg( robotCmd : robotCmd( MOVE ) ) { //MOVE = w | a | s | d | h
			run itunibo.robot.robotSupport.move( "msg(${payloadArg(0)})" ) 
		}	
 	}   
	Goto waitCmd 
}  

QActor onestepahead context ctx {
[" 
var foundObstacle = false; 
var StepTime = 0L; 
var Duration=0 
"]  
	State s0 initial {	   
		["foundObstacle = false "]
	} 
	Transition t0 whenMsg onestep -> doMoveForward
 
	State doMoveForward{		
		//["storeCurrentMessageForReply()"]  

		onMsg( onestep : onestep( TIME ) ) {
			["StepTime = payloadArg(0).toLong()"]   
			//println("onestepahead doMoveForward  StepTime=$StepTime") 
 			//forward resourcemodel -m modelChange : modelChange(robot,w)
	 		["startTimer()"] //startTimer is built-in in the actor
	 		forward robotactuator -m robotCmd: robotCmd(w)	
		
		}      
	}          
	Transition t0 whenTimeVar StepTime  -> endDoMoveForward		
 		          //whenEvent obstacle    -> stepFail	 
				  //whenMsg stopAppl      -> s0	//without any answer ???
 		          whenEvent sonarRobot  -> stepFail  //inviato da robotdatasource
 		    
	State endDoMoveForward{
		//println("onestepahead endDoMoveForward  ")
		//forward resourcemodel -m modelChange : modelChange(robot,h)

			forward robotactuator -m robotCmd: robotCmd(h)
			forward robotmind -m stepOk:stepOk
	}
	Goto s0
	  
	//Substitute with an ad-hoc actor for a real robot
//	State handleSonarRobot{  //before than the step time
//		println("onestepahead handleSonarRobot  ")
// 		["Duration=getDuration()"] //getDuration is built-in in the actor
////		printCurrentMessage
// 		onMsg ( sonarRobot : sonar( DISTANCE ) ){     
//			["val distance = Integer.parseInt( payloadArg(0) ) 
//              foundObstacle = (distance<20) "]  
//   		}
//	}
//	Goto stepFail if "foundObstacle" else s0
	
	State stepFail{ 
		printCurrentMessage
		["Duration=getDuration()"]  //getDuration is built-in in the actor
		println("onestepahead stepFail Duration=$Duration ")
/*["
replyToCaller(\"stepFail\", \"stepFail(obstacle,$Duration)\")
val m = MsgUtil.buildEvent(name, \"log\", \"log( obstacle($Duration) )\")
//emitLocalStreamEvent( m )	//for logger
emitLocalStreamEvent( \"log\", \"log( obstacle($Duration) )\" )	//for logger
"]*/


		forward robotmind -m stepFail:stepFail(obstacle,$Duration)


	}
	Goto s0  
}    
 
 
